/**
 * Servicio para manejar solicitudes HTTP usando Axios
 * REST Countries API - Axios Implementation
 */

class AxiosService {
    constructor() {
        this.baseURL = 'https://restcountries.com/v3.1';
        
        // Configurar interceptores de Axios para logging
        this.setupInterceptors();
    }

    /**
     * Configura interceptores para request y response
     */
    setupInterceptors() {
        // Interceptor para requests
        axios.interceptors.request.use(
            (config) => {
                console.log(`üöÄ Axios: Realizando solicitud a ${config.url}`);
                return config;
            },
            (error) => {
                console.error('‚ùå Error en request de Axios:', error);
                return Promise.reject(error);
            }
        );

        // Interceptor para responses
        axios.interceptors.response.use(
            (response) => {
                console.log(`‚úÖ Axios: Respuesta exitosa`, response.data);
                return response;
            },
            (error) => {
                console.error('‚ùå Error en response de Axios:', error);
                return Promise.reject(error);
            }
        );
    }

    /**
     * Obtiene todos los pa√≠ses o pa√≠ses de una regi√≥n espec√≠fica
     * @param {string} region - Regi√≥n opcional para filtrar pa√≠ses
     * @returns {Promise} - Promesa que resuelve con los datos de pa√≠ses
     */
    async getCountries(region = '') {
        try {
            // Construir URL seg√∫n si hay regi√≥n seleccionada
            let url = `${this.baseURL}/all`;
            if (region) {
                url = `${this.baseURL}/region/${region}`;
            }

            // Realizar solicitud con axios
            const response = await axios.get(url, {
                timeout: 10000, // Timeout de 10 segundos
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            // Axios autom√°ticamente parsea la respuesta JSON
            const data = response.data;

            // Limitar a 100 pa√≠ses para mejor rendimiento
            return data.slice(0, 100);

        } catch (error) {
            console.error('‚ùå Error en AxiosService:', error);
            
            // Manejar diferentes tipos de errores de Axios
            if (error.response) {
                // El servidor respondi√≥ con un c√≥digo de error
                throw new Error(`Error del servidor: ${error.response.status} - ${error.response.statusText}`);
            } else if (error.request) {
                // La solicitud fue hecha pero no se recibi√≥ respuesta
                throw new Error('No se pudo conectar con el servidor. Verifica tu conexi√≥n a internet.');
            } else {
                // Algo m√°s caus√≥ el error
                throw new Error(`Error de configuraci√≥n: ${error.message}`);
            }
        }
    }

    /**
     * Busca un pa√≠s por nombre
     * @param {string} name - Nombre del pa√≠s a buscar
     * @returns {Promise} - Promesa que resuelve con los datos del pa√≠s
     */
    async getCountryByName(name) {
        try {
            const url = `${this.baseURL}/name/${name}`;
            
            const response = await axios.get(url, {
                timeout: 5000,
                params: {
                    fullText: false // B√∫squeda parcial
                }
            });

            return response.data;

        } catch (error) {
            console.error('‚ùå Error buscando pa√≠s con Axios:', error);
            
            if (error.response?.status === 404) {
                throw new Error(`Pa√≠s "${name}" no encontrado`);
            }
            throw new Error(`Error buscando pa√≠s: ${error.message}`);
        }
    }

    /**
     * Obtiene pa√≠ses por c√≥digo de pa√≠s
     * @param {string} code - C√≥digo del pa√≠s (alpha2 o alpha3)
     * @returns {Promise} - Promesa que resuelve con los datos del pa√≠s
     */
    async getCountryByCode(code) {
        try {
            const url = `${this.baseURL}/alpha/${code}`;
            
            const response = await axios.get(url, {
                timeout: 5000
            });

            return response.data;

        } catch (error) {
            console.error('‚ùå Error buscando pa√≠s por c√≥digo con Axios:', error);
            
            if (error.response?.status === 404) {
                throw new Error(`C√≥digo de pa√≠s "${code}" no v√°lido`);
            }
            throw new Error(`Error buscando pa√≠s por c√≥digo: ${error.message}`);
        }
    }

    /**
     * Obtiene m√∫ltiples pa√≠ses por sus c√≥digos
     * @param {Array} codes - Array de c√≥digos de pa√≠ses
     * @returns {Promise} - Promesa que resuelve con los datos de los pa√≠ses
     */
    async getCountriesByCodes(codes) {
        try {
            const url = `${this.baseURL}/alpha`;
            
            const response = await axios.get(url, {
                timeout: 10000,
                params: {
                    codes: codes.join(',')
                }
            });

            return response.data;

        } catch (error) {
            console.error('‚ùå Error obteniendo pa√≠ses por c√≥digos:', error);
            throw new Error(`Error obteniendo pa√≠ses: ${error.message}`);
        }
    }
}

// Crear instancia global del servicio Axios
const axiosService = new AxiosService();